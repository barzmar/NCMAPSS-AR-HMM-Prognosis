function [Models, AVectors, BVectors] = calcAR_C(signal, p, Window, Lag, IntegrateNoise, phase)
arguments
    signal iddata
    p uint32
    Window uint32
    Lag uint32
    IntegrateNoise logical = false
    phase uint32 = 0
end
    %preparing for while loopa
    % L = length(cruiseData);
    speed_index = 6;
    
    L = length(signal.OutputData);
    counter = 0;
    
    dim_y = size(signal.OutputData, 2);
    dim_u = size(signal.InputData, 2);
    
    p 

    ny = ones(dim_y, dim_y, "double") .* p;
    nu = ones(dim_y, dim_u, "double") .* (p-phase);
    nk = ones(dim_y, dim_u, "double") * phase;
    
    for i = 1 : Lag : L-Window
                counter = counter + 1;
                y = signal(i:i+Window);
                % y = cruiseData(f).flight(c).DValue(sensor_index, i:i+Window)';
                % u = cruiseData(f).flight(c).DDValue(speed_index, i:i+Window)';
                % tempModel = ar(y, p, 'ls') % Assuming AR calculation on the second column
    
                if isempty(y.InputData)
                    tempModel = arx(y, ny, 'IntegrateNoise', IntegrateNoise) % Attempt with ARX system
                else
                    tempModel = arx(y, [ny nu nk], 'IntegrateNoise', IntegrateNoise)
                end
                % tempModel = armax(y, [p 3])
                AVectors(counter, :, :) = tempModel.A;
                BVectors(counter, :, :) = tempModel.B;
                Models{counter} = tempModel;
    end


% for f = 1 : L
%     for c = 1 : length(cruiseData(f).flight)
%         for i = 1 : Lag : length(cruiseData(f).flights(i).cruises(c).DDValue)-Window
%             counter = counter + 1;
%             y = iddata(cruiseData(f).flight(c).DDValue(sensor_index, i:i+Window)', [], 1);
%             % y = cruiseData(f).flight(c).DValue(sensor_index, i:i+Window)';
%             % u = cruiseData(f).flight(c).DDValue(speed_index, i:i+Window)';
%             tempModel = ar(y, p, 'ls'); % Assuming AR calculation on the second column
%             % tempModel = arx(u, y, [5 5 0]); % Attempt with ARX system
%             AVectors(counter, :) = tempModel.A;
%             BVectors(counter, :) = tempModel.B;
%         end
%     end
% end
end
